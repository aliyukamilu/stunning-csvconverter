"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SegmentTableBuilder = void 0;
const fs = __importStar(require("fs"));
const tableBuilder_1 = require("./tableBuilder");
const validator_1 = require("./validator");
class SegmentTableBuilder extends tableBuilder_1.TableBuilder {
    constructor(type) {
        super(type);
    }
    static enrichWithDefaultSegments(data) {
        data.add('UNB', {
            requires: 5,
            elements: [
                {
                    id: 'S001',
                    name: 'syntaxIdentifier',
                    requires: 2,
                    components: [
                        { format: 'a4', name: 'syntaxIdentifier' },
                        { format: 'n1', name: 'syntaxVersionNumber' },
                        {
                            format: 'an..6',
                            name: 'serviceCodeListDirectoryVersionNumber',
                        },
                        { format: 'an..3', name: 'characterEncodingCoded' },
                    ],
                },
                {
                    id: 'S002',
                    name: 'interchangeSender',
                    requires: 1,
                    components: [
                        {
                            format: 'an..35',
                            name: 'interchangeSenderIdentification',
                        },
                        {
                            format: 'an..4',
                            name: 'identificationCodeQualifier',
                        },
                        {
                            format: 'an..35',
                            name: 'interchangeSenderInternalIdentification',
                        },
                        {
                            format: 'an..35',
                            name: 'interchangeSenderInternalSubIdentification',
                        },
                    ],
                },
                {
                    id: 'S003',
                    name: 'interchangeRecipient',
                    requires: 1,
                    components: [
                        {
                            format: 'an..35',
                            name: 'interchangeRecipientIdentification',
                        },
                        {
                            format: 'an..4',
                            name: 'identificationCodeQualifier',
                        },
                        {
                            format: 'an..35',
                            name: 'interchangeRecipientInternalIdentification',
                        },
                        {
                            format: 'an..35',
                            name: 'interchangeRecipientInternalSubIdentification',
                        },
                    ],
                },
                {
                    id: 'S004',
                    name: 'dateAndTimeOfPreparation',
                    requires: 2,
                    components: [
                        { format: 'n..8', name: 'date' },
                        { format: 'n4', name: 'time' },
                    ],
                },
                {
                    id: '0020',
                    name: 'interchangeControlReference',
                    requires: 1,
                    components: [
                        {
                            format: 'an..14',
                            name: 'interchangeControlReference',
                        },
                    ],
                },
                {
                    id: 'S005',
                    name: 'recipientReferencePasswordDetails',
                    requires: 1,
                    components: [
                        {
                            format: 'an..14',
                            name: 'recipientReferencePassword',
                        },
                        {
                            format: 'an2',
                            name: 'recipientReferencePasswordQualifier',
                        },
                    ],
                },
                {
                    id: '0026',
                    name: 'applicationReference',
                    requires: 0,
                    components: [{ format: 'an..14', name: 'applicationReference' }],
                },
                {
                    id: '0029',
                    name: 'processingPriorityCode',
                    requires: 0,
                    components: [{ format: 'a1', name: 'processingPriorityCode' }],
                },
                {
                    id: '0031',
                    name: 'acknowledgementRequest',
                    requires: 0,
                    components: [{ format: 'n1', name: 'acknowledgementRequest' }],
                },
                {
                    id: '0032',
                    name: 'interchangeAgreementIdentifier',
                    requires: 0,
                    components: [
                        {
                            format: 'an..35',
                            name: 'interchangeAgreementIdentifier',
                        },
                    ],
                },
                {
                    id: '0035',
                    name: 'testIndicator',
                    requires: 0,
                    components: [{ format: 'n1', name: 'testIndicator' }],
                },
            ],
        });
        data.add('UNH', {
            requires: 2,
            elements: [
                {
                    id: '0062',
                    name: 'messageReferenceNumber',
                    requires: 1,
                    components: [{ format: 'an..14', name: 'messageReferenceNumber' }],
                },
                {
                    id: 'S009',
                    name: 'messageIdentifier',
                    requires: 4,
                    components: [
                        { format: 'an..6', name: 'messageType' },
                        { format: 'an..3', name: 'messageVersionNumber' },
                        { format: 'an..3', name: 'messageReleaseNumber' },
                        { format: 'an..3', name: 'controllingAgencyCoded' },
                        { format: 'an..6', name: 'associationAssignedCode' },
                        {
                            format: 'an..6',
                            name: 'codeListDirectoryVersionNumber',
                        },
                        {
                            format: 'an..6',
                            name: 'messageTypeSubfunctionIdentification',
                        },
                    ],
                },
                {
                    id: '0068',
                    name: 'commonAccessReference',
                    requires: 0,
                    components: [{ format: 'an..35', name: 'commonAccessReference' }],
                },
                {
                    id: 'S010',
                    name: 'statusOfTheTransfer',
                    requires: 1,
                    components: [
                        { format: 'n..2', name: 'sequenceOfTransfers' },
                        { format: 'a1', name: 'firstAndLastTransfer' },
                    ],
                },
                {
                    id: 'S016',
                    name: 'messageSubsetIdentification',
                    requires: 1,
                    components: [
                        {
                            format: 'an..14',
                            name: 'messageSubsetIdentification',
                        },
                        { format: 'an..3', name: 'messageSubsetVersionNumber' },
                        { format: 'an..3', name: 'messageSubsetReleaseNumber' },
                        { format: 'an..3', name: 'controllingAgencyCoded' },
                    ],
                },
                {
                    id: 'S017',
                    name: 'messageImplementationGuidelineIdentification',
                    requires: 1,
                    components: [
                        {
                            format: 'an..14',
                            name: 'messageImplementationGuidelineIdentification',
                        },
                        {
                            format: 'an..3',
                            name: 'messageImplementationGuidelineVersionNumber',
                        },
                        {
                            format: 'an..3',
                            name: 'messageImplementationGuidelineReleaseNumber',
                        },
                        { format: 'an..3', name: 'controllingAgencyCoded' },
                    ],
                },
                {
                    id: 'S018',
                    name: 'scenarioIdentification',
                    requires: 1,
                    components: [
                        { format: 'an..14', name: 'scenarioIdentification' },
                        { format: 'an..3', name: 'scenarioVersionNumber' },
                        { format: 'an..3', name: 'scenarioReleaseNumber' },
                        { format: 'an..3', name: 'controllingAgencyCoded' },
                    ],
                },
            ],
        });
        data.add('UNS', {
            requires: 1,
            elements: [
                {
                    id: '0081',
                    name: 'sectionIdentification',
                    requires: 1,
                    components: [{ format: 'a1', name: 'sectionIdentification' }],
                },
            ],
        });
        data.add('UNT', {
            requires: 2,
            elements: [
                {
                    id: '0074',
                    name: 'numberOfSegmentsInAMessage',
                    requires: 1,
                    components: [{ format: 'n..10', name: 'numberOfSegmentsInAMessage' }],
                },
                {
                    id: '0062',
                    name: 'messageReferenceNumber',
                    requires: 1,
                    components: [{ format: 'an..14', name: 'messageReferenceNumber' }],
                },
            ],
        });
        data.add('UNZ', {
            requires: 2,
            elements: [
                {
                    id: '0036',
                    name: 'interchangeControlCount',
                    requires: 1,
                    components: [{ format: 'n..6', name: 'interchangeControlCount' }],
                },
                {
                    id: '0020',
                    name: 'interchangeControlReference',
                    requires: 1,
                    components: [
                        {
                            format: 'an..14',
                            name: 'interchangeControlReference',
                        },
                    ],
                },
            ],
        });
        return data;
    }
    build() {
        const fileLoc = this.getDefinitionFileLoc();
        let dict;
        if (fileLoc) {
            const sData = fs.readFileSync(fileLoc, {
                encoding: 'utf-8',
            });
            const data = JSON.parse(sData);
            dict = new validator_1.Dictionary(data);
        }
        else {
            dict = new validator_1.Dictionary();
        }
        return SegmentTableBuilder.enrichWithDefaultSegments(dict);
    }
}
exports.SegmentTableBuilder = SegmentTableBuilder;
//# sourceMappingURL=segments.js.map