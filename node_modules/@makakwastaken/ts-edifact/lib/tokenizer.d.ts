import { Configuration } from './configuration';
interface RegExType {
    alpha: RegExp;
    numeric: RegExp;
    alphanumeric: RegExp;
    decimal: RegExp;
}
export declare abstract class Charset implements RegExType {
    name: string;
    alpha: RegExp;
    alphanumeric: RegExp;
    numeric: RegExp;
    decimal: RegExp;
    constructor(name: string, configuration: Configuration, admissibleAlphabet: string[][], unicode?: boolean);
    private compile;
}
export declare class Tokenizer {
    private regexes;
    private regex;
    buffer: string;
    alpha(): void;
    alphanumeric(): void;
    numeric(): void;
    decimal(chunk: string, index: number): void;
    constructor(config: Configuration);
    setCharsetBasedOnConfig(config: Configuration): RegExType;
    segment(chunk: string, index: number): number;
    data(chunk: string, index: number): number;
    release(chunk: string, index: number): void;
    length(): number;
    content(): string;
    private errors;
}
export {};
//# sourceMappingURL=tokenizer.d.ts.map